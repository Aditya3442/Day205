class Solution {
    int directions[][] = {{0 , -1} , {-1 , 0} , {0 , 1} , {1 , 0}};
    public void dfs(int i , int j , boolean[][] visited , char[][] grid) {
        visited[i][j] = true;
        for(int dir[] : directions) {
            int x = i + dir[0];
            int y = j + dir[1];
            if(x >= 0 && x < grid.length && y >= 0 && y < grid[0].length && !visited[x][y] && grid[x][y] == '1')
                 dfs(x , y , visited , grid);
        }
    }
    public int numIslands(char[][] grid) {
        int n = grid.length;
        int m = grid[0].length;

        boolean visited[][] = new boolean[n][m];
        int ans = 0;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(grid[i][j] == '1' && !visited[i][j]) {
                    ans++;
                    dfs(i , j , visited , grid);
                }
            }
        }
        return ans;
    }
}
